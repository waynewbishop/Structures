/*:
 
 # Machine Learning with CoreML (Sample)
 
 This playground provides a sample for getting started with machine learning and the CoreML framework. The Swift Structures package has been optimized for **Swift 5.3** (e.g., Xcode 12.0) or later.
 */
import Foundation
import CoreML


class Learning {
        
/*:
**AEClassifier** is a manually generated *.mlmodel* file trained with csv data built on MacOS.
This file is found in the respective **Resources** directory and is built as part of the CoreML playground file.
*/

    func loadModel() -> MLModel? {
        let newModel = try? AEClassifier(configuration: MLModelConfiguration()).model
        return newModel
    }
            
/*:
**AEClassifierInput** is a wrapper based on the inputs(s) defined in the *.mlmodel* file. This content wrapper is generated programmatically by Xcode at compile time.
 */
    
    func AEPredict(using statement: String) -> String? {

        //load the model
        guard let model = loadModel() else {
            print("model not correctly loaded..")
            return nil
        }

        
        //class generated by Xcode
        let modelInput = AEClassifierInput(text: statement)
        
        guard let prediction = try? model.prediction(from: modelInput) else {
            fatalError("Unexpected runtime error.")
        }
         
        
        let results = prediction.featureValue(for: "label")?.stringValue
                
        //return predicted value - String
        return results
    }
    
    
} //end class



//define positive test
func testClassifierAccurate() {
        
    let learning = Learning()
    let statement: String = "The solar system has eight planets"
    
    if let outcome = learning.AEPredict(using: statement) {
        print("prediction is : \(outcome)")
    }
    
}


//define negative test
func testClassifierExaggerate() {
 
    let learning = Learning()
    let statement: String = "It always rains in Seattle"
    
    if let outcome = learning.AEPredict(using: statement) {
        print("prediction is : \(outcome)")
    }
    
}


//run tests
testClassifierAccurate()
testClassifierExaggerate()
